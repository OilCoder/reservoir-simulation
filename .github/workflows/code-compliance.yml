name: Code Compliance Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  validate-code:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff pylint pydocstyle pytest
    
    - name: Make hooks executable
      run: |
        chmod +x .claude/hooks/*.sh
    
    - name: Check file naming conventions
      run: |
        echo "=== Checking File Naming Conventions ==="
        # Find all Python and Octave files
        find src mrst_simulation_scripts -name "*.py" -o -name "*.m" | while read file; do
          .claude/hooks/validate-file-naming.sh "$file" || exit 1
        done
    
    - name: Validate code style
      run: |
        echo "=== Validating Code Style ==="
        find src -name "*.py" | while read file; do
          .claude/hooks/validate-code-style.sh "$file" || exit 1
        done
    
    - name: Check docstrings (Python)
      run: |
        echo "=== Checking Python Docstrings ==="
        find src -name "*.py" | while read file; do
          .claude/hooks/validate-docstrings.sh "$file" || exit 1
        done
    
    - name: Run Python linting
      run: |
        echo "=== Running Python Linters ==="
        # Ruff for fast checking
        ruff check src/ || true
        
        # Pydocstyle for Google Style
        pydocstyle --convention=google src/ || true
    
    - name: Check for print statements
      run: |
        echo "=== Checking for Print Statements ==="
        find src mrst_simulation_scripts -name "*.py" -o -name "*.m" | while read file; do
          .claude/hooks/cleanup-print-statements.sh "$file"
        done
    
    - name: Generate compliance report
      if: always()
      run: |
        echo "=== Compliance Summary ==="
        echo "Total Python files: $(find src -name '*.py' | wc -l)"
        echo "Total Octave files: $(find mrst_simulation_scripts -name '*.m' 2>/dev/null | wc -l || echo 0)"
        
  test-structure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Verify project structure
      run: |
        echo "=== Verifying Project Structure ==="
        
        # Check required directories exist
        for dir in src mrst_simulation_scripts docs/English docs/Spanish; do
          if [ ! -d "$dir" ]; then
            echo "❌ Missing required directory: $dir"
            exit 1
          else
            echo "✅ Found directory: $dir"
          fi
        done
        
        # Check .gitignore includes test and debug
        if grep -q "^/tests/$" .gitignore && grep -q "^/debug/$" .gitignore; then
          echo "✅ .gitignore properly configured"
        else
          echo "❌ .gitignore missing /tests/ or /debug/ entries"
          exit 1
        fi
        
        # Check CLAUDE.md exists
        if [ -f "CLAUDE.md" ]; then
          echo "✅ CLAUDE.md found"
        else
          echo "❌ CLAUDE.md missing"
          exit 1
        fi
{
  "description": "Multi-Mode Policy-Aware Code Generation System with Natural Language Routing",
  
  "hooks": {
    "userPromptSubmit": {
      "description": "Enhanced router with natural intent detection and multi-mode policy injection",
      "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/user_prompt_submit.py"
    },
    "postToolUse": {
      "Write|Edit|MultiEdit": {
        "description": "Multi-mode policy validation scanner with context awareness (suggest/warn/strict)",
        "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/post_tool_use.py"
      }
    },
    "subagentStop": {
      "description": "Consolidates results when subagents complete their tasks", 
      "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/subagent_stop.py"
    }
  },
  
  "permissions": {
    "description": "Tool permissions for the 4-agent multi-mode policy system",
    "allow": [
      "Task",
      "Read", 
      "Write", 
      "Edit", 
      "MultiEdit",
      "Bash", 
      "Grep", 
      "Glob",
      "LS",
      "mcp__filesystem__*",
      "mcp__memory__*",
      "mcp__ref__*",
      "mcp__sequential-thinking__*",
      "mcp__todo__*"
    ],
    "deny": []
  },
  
  "agents": {
    "description": "Multi-agent configuration with policy-aware specialization and context awareness",
    "coder": {
      "description": "Production code writer following 5-policy system with context-aware validation",
      "folders": ["src/", "mrst_simulation_scripts/", "scripts/"],
      "policies": ["canon-first", "data-authority", "fail-fast", "exception-handling", "kiss-principle"],
      "rules": [1, 2, 5, 6, 8],
      "validation_modes": ["suggest", "warn", "strict"],
      "mcp_servers": ["filesystem"],
      "allowed_tools": [
        "mcp__filesystem__*",
        "Read", "Write", "Edit", "MultiEdit", "Grep", "Glob", "Bash"
      ]
    },
    "tester": {
      "description": "Test specialist with policy compliance validation across all modes",
      "folders": ["tests/"],
      "policies": ["canon-first", "data-authority", "fail-fast", "exception-handling", "kiss-principle"],
      "rules": [1, 3, 5, 6, 8],
      "validation_modes": ["suggest", "warn", "strict"],
      "mcp_servers": ["filesystem"],
      "allowed_tools": [
        "mcp__filesystem__*",
        "Read", "Write", "Bash"
      ]
    },
    "debugger": {
      "description": "Debug specialist with policy-aware investigation and mode context analysis",
      "folders": ["debug/"],
      "policies": ["canon-first", "data-authority", "fail-fast", "exception-handling", "kiss-principle"],
      "rules": [1, 4, 5, 6, 8],
      "validation_modes": ["suggest", "warn", "strict"],
      "mcp_servers": ["filesystem"],
      "allowed_tools": [
        "mcp__filesystem__*",
        "Read", "Write", "Bash"
      ]
    },
    "doc-writer": {
      "description": "Documentation specialist with policy-aware technical writing and multi-mode guidance",
      "folders": ["obsidian-vault/"],
      "policies": ["canon-first", "data-authority", "fail-fast", "exception-handling", "kiss-principle"],
      "rules": [1, 5, 6, 7, 8],
      "validation_modes": ["suggest", "warn", "strict"],
      "mcp_servers": ["filesystem"],
      "allowed_tools": [
        "mcp__filesystem__*",
          "Read", "Write", "Edit", "Grep", "Glob"
      ]
    }
  },
  
  "workflow": {
    "description": "Router-based multi-agent workflow with policy-aware context and validation modes",
    "auto_activation": {
      "coder_keywords": ["create", "implement", "write", "edit", "add", "build", "develop", "function", "class", "module", "script", "code", "algorithm"],
      "tester_keywords": ["test", "testing", "pytest", "unittest", "validation", "verify", "check", "assert", "coverage", "edge case"],
      "debugger_keywords": ["debug", "fix", "error", "bug", "issue", "problem", "investigate", "analyze", "trace", "diagnose", "troubleshoot", "broken"],
      "doc_writer_keywords": ["document", "documentation", "readme", "guide", "tutorial", "explain", "describe", "writeup", "docstring", "manual", "reference", "wiki"]
    },
    "default_agents": ["coder"],
    "parallel_execution": false,
    "budget_management": {
      "conservative_threshold": 25,
      "disable_secondary_agents": true
    },
    "validation_modes": {
      "suggest": "Prototyping: recommendations and guidance",
      "warn": "Development: violations flagged but not blocking", 
      "strict": "Production: full enforcement with blocking on errors"
    },
    "policy_enforcement": {
      "context_aware": true,
      "override_mechanisms": {
        "file_level": "# @policy-override: suggest",
        "environment": "CLAUDE_VALIDATION_MODE=strict"
      }
    }
  },
  
  "project": {
    "description": "Project-specific settings",
    "type": "reservoir_simulation",
    "languages": ["python", "octave"],
    "rules_path": ".claude/rules/",
    "policies_path": ".claude/policies/",
    "documentation_path": "obsidian-vault/",
    "logging": {
      "enabled": true,
      "path": ".claude/logs/",
      "format": "jsonl"
    }
  },
  
  "mcp": {
    "description": "MCP server configuration and usage guidelines",
    "servers": {
      "filesystem": "Optimized file operations - use instead of native Read/Write/Edit",
      "memory": "Persistent knowledge graph for code patterns and context", 
      "ref": "External documentation and best practices lookup",
      "sequential-thinking": "Complex problem analysis and step-by-step reasoning",
      "todo": "Task and progress tracking"
    },
    "performance_benefits": {
      "filesystem": "10x faster than native file operations",
      "memory": "Persistent context across sessions",
      "sequential-thinking": "Better complex problem solving"
    }
  }
}
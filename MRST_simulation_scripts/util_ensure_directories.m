function util_ensure_directories()
% util_ensure_directories - Ensure all required directories exist
%
% Creates all necessary directories for MRST simulation workflow including
% data storage, plots, and temporary files. Provides detailed logging of
% directory creation status.
%
% Args:
%   None
%
% Returns:
%   None (creates directories as needed)
%
% Requires: None (pure Octave/MATLAB)

%% ----
%% Step 1 ‚Äì Define required directories
%% ----

% Substep 1.1 ‚Äì List all required directories __________________
required_dirs = {
    'data'                     % Main data directory for simulation snapshots
};

fprintf('[INFO] Checking and creating required directories...\n');

%% ----
%% Step 2 ‚Äì Create directories if they don't exist
%% ----

% Substep 2.1 ‚Äì Loop through required directories ______________
n_created = 0;
n_existing = 0;

for i = 1:length(required_dirs)
    dir_path = required_dirs{i};
    
    % üìÅ Check if directory exists
    if ~exist(dir_path, 'dir')
        % ‚úÖ Create directory
        try
            mkdir(dir_path);
            fprintf('[INFO] Created directory: %s\n', dir_path);
            n_created = n_created + 1;
        catch ME
            fprintf('[ERROR] Failed to create directory %s: %s\n', dir_path, ME.message);
        end
    else
        % üîÑ Directory already exists
        n_existing = n_existing + 1;
    end
end

%% ----
%% Step 3 ‚Äì Verify directory permissions
%% ----

% Substep 3.1 ‚Äì Test write permissions _________________________
fprintf('[INFO] Testing write permissions...\n');

critical_dirs = {'data'};
all_writable = true;

for i = 1:length(critical_dirs)
    dir_path = critical_dirs{i};
    test_file = fullfile(dir_path, 'test_write.tmp');
    
    try
        % üìù Test write access
        fid = fopen(test_file, 'w');
        if fid > 0
            fprintf(fid, 'test');
            fclose(fid);
            delete(test_file);
            fprintf('[INFO] Write permission OK: %s\n', dir_path);
        else
            fprintf('[ERROR] Cannot write to directory: %s\n', dir_path);
            all_writable = false;
        end
    catch ME
        fprintf('[ERROR] Write test failed for %s: %s\n', dir_path, ME.message);
        all_writable = false;
    end
end

%% ----
%% Step 4 ‚Äì Create .gitignore for data directories
%% ----

% Substep 4.1 ‚Äì Create .gitignore in data directory ____________
gitignore_path = fullfile('data', '.gitignore');
if ~exist(gitignore_path, 'file')
    try
        fid = fopen(gitignore_path, 'w');
        if fid > 0
            fprintf(fid, '# Ignore all data files\n');
            fprintf(fid, '*.mat\n');
            fprintf(fid, '*.csv\n');
            fprintf(fid, '*.h5\n');
            fprintf(fid, '*.hdf5\n');
            fprintf(fid, '*.pkl\n');
            fprintf(fid, '*.npz\n');
            fprintf(fid, '\n');
            fprintf(fid, '# Keep directory structure\n');
            fprintf(fid, '!.gitignore\n');
            fprintf(fid, '!README.md\n');
            fclose(fid);
            fprintf('[INFO] Created .gitignore in data directory\n');
        end
    catch ME
        fprintf('[WARN] Could not create .gitignore: %s\n', ME.message);
    end
end

%% ----
%% Step 5 ‚Äì Create README files for documentation
%% ----

% Substep 5.1 ‚Äì Create README in data directory ___________________
readme_path = fullfile('data', 'README.md');
if ~exist(readme_path, 'file')
    try
        fid = fopen(readme_path, 'w');
        if fid > 0
            fprintf(fid, '# Simulation Data\n\n');
            fprintf(fid, 'This directory contains simulation snapshots generated by MRST.\n\n');
            fprintf(fid, '## File Format\n\n');
            fprintf(fid, '- `snap_XXX.mat`: Simulation snapshots at different timesteps\n');
            fprintf(fid, '- `metadata.mat`: Simulation metadata and parameters\n');
            fprintf(fid, '- `metadata.yaml`: Human-readable metadata\n\n');
            fprintf(fid, '## Data Structure\n\n');
            fprintf(fid, 'Each snapshot contains:\n');
            fprintf(fid, '- `sigma_eff`: Effective stress [Pa]\n');
            fprintf(fid, '- `phi`: Porosity [-]\n');
            fprintf(fid, '- `k`: Permeability [m¬≤]\n');
            fprintf(fid, '- `rock_id`: Rock region ID [-]\n');
            fprintf(fid, '- `pressure`: Pressure field [Pa]\n');
            fprintf(fid, '- `timestamp`: Timestep number\n');
            fprintf(fid, '- `time_days`: Simulation time [days]\n');
            fclose(fid);
            fprintf('[INFO] Created README in data directory\n');
        end
    catch ME
        fprintf('[WARN] Could not create README in data directory: %s\n', ME.message);
    end
end

%% ----
%% Step 6 ‚Äì Final summary
%% ----

% Substep 6.1 ‚Äì Report directory creation status _______________
fprintf('\n--- Directory Setup Summary ---\n');
fprintf('Directories created: %d\n', n_created);
fprintf('Directories existing: %d\n', n_existing);
fprintf('Total directories: %d\n', length(required_dirs));

if all_writable
    fprintf('‚úÖ All critical directories writable\n');
else
    fprintf('‚ùå Some directories not writable - check permissions\n');
end

% Substep 6.2 ‚Äì List final directory structure _________________
fprintf('\nFinal directory structure:\n');
for i = 1:length(required_dirs)
    dir_path = required_dirs{i};
    if exist(dir_path, 'dir')
        fprintf('  ‚úÖ %s\n', dir_path);
    else
        fprintf('  ‚ùå %s (missing)\n', dir_path);
    end
end

fprintf('[INFO] Directory setup completed\n');
end 